{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "aadAppClientId": {
        "type": "string",
        "metadata": {
          "description": "The client Id of azure active directory app/service principal"
        }
      },
      "storageAccountName": {
        "type": "string"
      },
      "dataLakeAccountName": {
        "type": "string"
      },
      "keyVaultName": {
        "type": "string"
      },
      "purviewAccountName": {
        "type": "string"
      },
      "newOrExistingPurviewAccount": {
        "type": "string",
        "allowedValues": [
          "new",
          "existing"
        ],
        "metadata": {
          "description": "Create a new purview account or use an existing one"
        }
      },
      "purviewResourceGroup": {
        "type": "string"
      },
      "userObjectId": {
        "type": "string"
      },
      "synapseObjectId": {
        "type": "string"
      }
    },
      "variables": {
        "functionAppName": "[concat('funcapp', uniqueString(resourceGroup().id))]",
        "assignDirectoryReadersRoleFunctionName": "assignDirectoryReadersRole",
        "createPurviewAccountFunctionName": "createPurviewAccount",
        "assignPurviewRolesFunctionName": "assignPurviewRoles",
        "configurePurviewFunctionName": "configurePurview",
        "deletePurviewFunctionName": "deletePurview",
        "tenantId": "[subscription().tenantId]",
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroup": "[resourceGroup().name]",
        "roleAssignmentName": "[guid(resourceGroup().id)]"
      },
  "resources": [
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[variables('roleAssignmentName')]",
      "dependsOn": [],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
        "principalId": "[reference(resourceId(parameters('purviewResourceGroup'),'Microsoft.Purview/accounts', parameters('purviewAccountName')), '2020-12-01-preview', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[variables('roleAssignmentName')]",
      "dependsOn": [],
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
        "principalId": "[reference(resourceId(parameters('purviewResourceGroup'),'Microsoft.Purview/accounts', parameters('purviewAccountName')), '2020-12-01-preview', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceGroup().id]"
      }
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('assignDirectoryReadersRoleFunctionName'))]",
      "properties": {
        "config": {
            "bindings": [
                {
                  "authLevel": "anonymous",
                  "type": "httpTrigger",
                  "direction": "in",
                  "name": "req",
                  "methods": [
                    "get",
                    "post"
                  ]
                },
                {
                  "type": "http",
                  "direction": "out",
                  "name": "res"
                }
              ]
        },
        "files": {
          "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n// ################\n// GLOBAL VARIABLES\n// ################\n\nconst keyVaultName = \"',parameters('keyVaultName'),'\";\nconst KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n\n// Setting up client for KeyVault\nconst credential = new DefaultAzureCredential();\nconst client = new SecretClient(KVUri, credential);\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction add_synapse_ad_role(access_token, object_id, role_id) {\n    var data = {\n        \"@odata.id\": `https://graph.microsoft.com/v1.0/directoryObjects/${object_id}`\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`https://graph.microsoft.com/v1.0/directoryRoles/roleTemplateId=${role_id}/members/$ref`, data, config)\n}\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"Azure Active Directory Role update function processed a request.\");\n\n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    const tenant_id = \"',variables('tenantId'),'\"\n    const client_id = \"',parameters('aadAppClientId'),'\"\n    const resource_graph_url = \"https://graph.microsoft.com/\"\n\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret = retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function for Graph API\n    const token_graph = await azuread_auth(tenant_id, client_id, client_secret, resource_graph_url);\n    const access_token_graph = token_graph.access_token;\n    context.log(access_token_graph)\n\n    // ###############\n    // Synapse AD Role\n    // ###############\n\n    // Setting up values to be used\n    const ad_object_id = \"',parameters('synapseObjectId'),'\";  // Synapse Workspace Object ID\n    const ad_role_id = \"88d8e3e3-8f55-4a1e-953a-9b9898b8876b\";  // Data Reader Role Template ID\n\n    // Adding AD Data Reader Role for Synapse\n    const response_synapse_ad_role = await add_synapse_ad_role(access_token_graph, ad_object_id, ad_role_id);\n    context.log(response_synapse_ad_role)\n\n    context.res = {\n        body: `Azure Active Directory Role update function triggered successfully..`\n    };\n}')]"
        }
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('createPurviewAccountFunctionName'))]",
      "properties": {
        "config": {
            "bindings": [
                {
                  "authLevel": "anonymous",
                  "type": "httpTrigger",
                  "direction": "in",
                  "name": "req",
                  "methods": [
                    "get",
                    "post"
                  ]
                },
                {
                  "type": "http",
                  "direction": "out",
                  "name": "res"
                }
              ]
        },
        "files": {
          "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n// ################\n// GLOBAL VARIABLES\n// ################\n\n// Setting up strings for KeyVault secret\nconst keyVaultName =\"', parameters('keyVaultName'),'\";\nconst KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n\n// Setting up client for KeyVault\nconst credential = new DefaultAzureCredential();\nconst client = new SecretClient(KVUri, credential);\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_purview_account(access_token, subscription_id, rg_name, managed_rg_name, account_name, region, api_version=\"2020-12-01-preview\") {\n    var data = {\n        \"location\": `${region}`,\n        \"sku\": {\n            \"name\": \"Standard\",\n            \"capacity\": 4\n        },\n        \"identity\": {\n            \"type\": \"SystemAssigned\"\n        },\n        \"tags\": {\n            \"Name\": `${account_name}`\n        },\n        \"properties\": {\n            \"managedResourceGroupName\": `${managed_rg_name}`,\n            \"publicNetworkAccess\": \"Enabled\"\n        }\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${rg_name}/providers/Microsoft.Purview/accounts/${account_name}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"Azure Purview Creation function processed a request.\");\n\n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    const tenant_id =\"', variables('tenantId'),'\"\n    const client_id =\"', parameters('aadAppClientId'),'\"\n    const resource_mgmt_url = \"https://management.azure.com/\"\n\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret = retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function for Purview Account creation\n    const token_mgmt = await azuread_auth(tenant_id, client_id, client_secret, resource_mgmt_url);\n    const access_token_mgmt = token_mgmt.access_token;\n    context.log(access_token_mgmt)\n\n    \n    // Common variables\n    const subscription_id =\"', variables('subscriptionId'),'\";\n    const rg_name =\"', variables('resourceGroup'),'\";\n\n    // ########################\n    // Purview Account Creation\n    // ########################\n\n    // Setting up values to be used\n    const purview_account_name =\"', parameters('purviewAccountName'),'\";\n    const region_purview =\"', parameters('location'),'\";\n    const managed_rg_purview = `${purview_account_name}-managed-rg`;\n\n    const response_purview_account = await create_purview_account(access_token_mgmt, subscription_id, rg_name, managed_rg_purview,\n        purview_account_name, region_purview);\n    context.log(response_purview_account);\n\n\n    // Creating Purview Account secret to retrieve from configuration function\n    const result_purview_account = await client.setSecret(\"purviewAccount\", purview_account_name);\n    context.log(result_purview_account)\n\n    context.res = {\n        body: `AzurePurview Creation function triggered successfully..`\n    };\n}')]"
        }
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('assignPurviewRolesFunctionName'))]",
      "properties": {
        "config": {
            "bindings": [
                {
                  "authLevel": "anonymous",
                  "type": "httpTrigger",
                  "direction": "in",
                  "name": "req",
                  "methods": [
                    "get",
                    "post"
                  ]
                },
                {
                  "type": "http",
                  "direction": "out",
                  "name": "res"
                }
              ]
        },
        "files": {
          "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\nvar fs = require(\"fs\");\nconst path = require(\"path\");\nconst csv = require(\"fast-csv\");\nconst got = require(\"got\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n// ################\n// GLOBAL VARIABLES\n// ################\n\n// Setting up strings for KeyVault secret\nconst keyVaultName = \"',parameters('keyVaultName'),'\";\nconst KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n\n// Setting up client for KeyVault\nconst credential = new DefaultAzureCredential();\nconst client = new SecretClient(KVUri, credential);\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction get_root_policy(access_token, account_endpoint, api_version=\"2021-07-01\") {\n    var config = {   \n        headers: { \n            \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.get(`${account_endpoint}/policystore/metadataPolicies?api-version=${api_version}`, config)\n        .then(response => response.data)\n        .catch(error => error);\n}\n\nfunction update_root_policy(access_token, Endpoint, account_name, policy_id, policy_version, object_id, synapse_id, app_object_id, api_version=\"2021-07-01\") {\n\n    var data = {\n        \"version\":`${policy_version}`,\n        \"properties\":{\n           \"description\":\"\",\n           \"decisionRules\":[\n              {\n                 \"kind\":\"decisionrule\",\n                 \"effect\":\"Permit\",\n                 \"dnfCondition\":[\n                    [\n                       {\n                          \"attributeName\":\"resource.purview.collection\",\n                          \"attributeValueIncludes\":`${account_name}`\n                       },\n                       {\n                          \"fromRule\":`permission:${account_name}`,\n                          \"attributeName\":\"derived.purview.permission\",\n                          \"attributeValueIncludes\":`permission:${account_name}`\n                       }\n                    ]\n                 ]\n              }\n           ],\n           \"attributeRules\":[\n              {\n                 \"kind\":\"attributerule\",\n                 \"id\":`purviewmetadatarole_builtin_collection-administrator:${account_name}`,\n                 \"name\":`purviewmetadatarole_builtin_collection-administrator:${account_name}`,\n                 \"dnfCondition\":[\n                    [\n                       {\n                          \"attributeName\":\"principal.microsoft.id\",\n                          \"attributeValueIncludedIn\":[\n                             `${app_object_id}`,\n                             `${object_id}`,\n                             `${synapse_id}`\n                            ]\n                       },\n                       {\n                          \"fromRule\":\"purviewmetadatarole_builtin_collection-administrator\",\n                          \"attributeName\":\"derived.purview.role\",\n                          \"attributeValueIncludes\":\"purviewmetadatarole_builtin_collection-administrator\"\n                       }\n                    ]\n                 ]\n              },\n              {\n                 \"kind\":\"attributerule\",\n                 \"id\":`purviewmetadatarole_builtin_purview-reader:${account_name}`,\n                 \"name\":`purviewmetadatarole_builtin_purview-reader:${account_name}`,\n                 \"dnfCondition\":[\n                    [\n                       {\n                          \"attributeName\":\"principal.microsoft.id\",\n                          \"attributeValueIncludedIn\":[\n                             `${app_object_id}`,\n                             `${object_id}`,\n                             `${synapse_id}`\n                          ]\n                       },\n                       {\n                          \"fromRule\":\"purviewmetadatarole_builtin_purview-reader\",\n                          \"attributeName\":\"derived.purview.role\",\n                          \"attributeValueIncludes\":\"purviewmetadatarole_builtin_purview-reader\"\n                       }\n                    ]\n                 ]\n              },\n              {\n                 \"kind\":\"attributerule\",\n                 \"id\":`purviewmetadatarole_builtin_data-curator:${account_name}`,\n                 \"name\":`purviewmetadatarole_builtin_data-curator:${account_name}`,\n                 \"dnfCondition\":[\n                    [\n                       {\n                          \"attributeName\":\"principal.microsoft.id\",\n                          \"attributeValueIncludedIn\":[\n                             `${app_object_id}`,\n                             `${object_id}`,\n                             `${synapse_id}`\n                          ]\n                       },\n                       {\n                          \"fromRule\":\"purviewmetadatarole_builtin_data-curator\",\n                          \"attributeName\":\"derived.purview.role\",\n                          \"attributeValueIncludes\":\"purviewmetadatarole_builtin_data-curator\"\n                       }\n                    ]\n                 ]\n              },\n              {\n                 \"kind\":\"attributerule\",\n                 \"id\":`purviewmetadatarole_builtin_data-source-administrator:${account_name}`,\n                 \"name\":`purviewmetadatarole_builtin_data-source-administrator:${account_name}`,\n                 \"dnfCondition\":[\n                    [\n                       {\n                          \"attributeName\":\"principal.microsoft.id\",\n                          \"attributeValueIncludedIn\":[\n                             `${app_object_id}`,\n                             `${object_id}`,\n                             `${synapse_id}`\n                          ]\n                       },\n                       {\n                          \"fromRule\":\"purviewmetadatarole_builtin_data-source-administrator\",\n                          \"attributeName\":\"derived.purview.role\",\n                          \"attributeValueIncludes\":\"purviewmetadatarole_builtin_data-source-administrator\"\n                       }\n                    ]\n                 ]\n              },\n              {\n                 \"kind\":\"attributerule\",\n                 \"id\":`permission:${account_name}`,\n                 \"name\":`permission:${account_name}`,\n                 \"dnfCondition\":[\n                    [\n                       {\n                          \"fromRule\":`purviewmetadatarole_builtin_collection-administrator:${account_name}`,\n                          \"attributeName\":\"derived.purview.permission\",\n                          \"attributeValueIncludes\":`purviewmetadatarole_builtin_collection-administrator:${account_name}`\n                       }\n                    ],\n                    [\n                       {\n                          \"fromRule\":`purviewmetadatarole_builtin_purview-reader:${account_name}`,\n                          \"attributeName\":\"derived.purview.permission\",\n                          \"attributeValueIncludes\":`purviewmetadatarole_builtin_purview-reader:${account_name}`\n                       }\n                    ],\n                    [\n                       {\n                          \"fromRule\":`purviewmetadatarole_builtin_data-curator:${account_name}`,\n                          \"attributeName\":\"derived.purview.permission\",\n                          \"attributeValueIncludes\":`purviewmetadatarole_builtin_data-curator:${account_name}`\n                       }\n                    ],\n                    [\n                       {\n                          \"fromRule\":`purviewmetadatarole_builtin_data-source-administrator:${account_name}`,\n                          \"attributeName\":\"derived.purview.permission\",\n                          \"attributeValueIncludes\":`purviewmetadatarole_builtin_data-source-administrator:${account_name}`\n                       }\n                    ]\n                 ]\n              }\n           ],\n           \"collection\":{\n              \"type\":\"CollectionReference\",\n              \"referenceName\":`${account_name}`\n           }\n        }\n     };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/policystore/metadataPolicies/${policy_id}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"Azure Purview collection roles update function processed a request.\");\n\n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    const tenant_id = \"',variables('tenantId'),'\"\n    const client_id = \"',parameters('aadAppClientId'),'\"\n    const resource_url = \"https://purview.azure.net/\"\n    const resource_mgmt_url = \"https://management.azure.com/\"\n    const resource_synapse_url = \"https://dev.azuresynapse.net/\"\n    const resource_graph_url = \"https://graph.microsoft.com/\"\n\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret = retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function for Purview assets magagement\n    const token = await azuread_auth(tenant_id, client_id, client_secret, resource_url);\n    const access_token = token.access_token;\n    context.log(access_token)\n\n    // Retrieve access_token from AzureAuth function for Purview Account creation\n    const token_mgmt = await azuread_auth(tenant_id, client_id, client_secret, resource_mgmt_url);\n    const access_token_mgmt = token_mgmt.access_token;\n    context.log(access_token_mgmt)\n\n    // Retrieve access_token from AzureAuth function for Purview assets magagement\n    const token_synapse = await azuread_auth(tenant_id, client_id, client_secret, resource_synapse_url);\n    const access_token_synapse = token_synapse.access_token;\n    context.log(access_token_synapse)\n\n    // Retrieve access_token from AzureAuth function for Graph API\n    const token_graph = await azuread_auth(tenant_id, client_id, client_secret, resource_graph_url);\n    const access_token_graph = token_graph.access_token;\n    context.log(access_token_graph)\n\n    \n    // Setting up values to be used\n    const purview_account_name = \"purvforsynaccount123\";\n    const scan_endpoint = `https://${purview_account_name}.scan.purview.azure.com`;     // Azure Purview scan endpoint\n    const account_endpoint = `https://${purview_account_name}.purview.azure.com`;      // Azure Purview account endpoint\n\n    // #####################\n    // ROOT COLLECTION ROLES\n    // #####################\n\n    let response_root_policy = await get_root_policy(access_token, account_endpoint);\n    context.log(response_root_policy);\n    \n    const policy_details = response_root_policy.values[0];\n    const policy_id = policy_details.id\n    const policy_version = policy_details.version\n\n    context.log(policy_id, policy_version)\n    context.log(`Allowed entities are: ${response_root_policy.values[0].properties.attributeRules[0].dnfCondition[0][0].attributeValueIncludedIn}`);\n\n    const app_object_id = response_root_policy.values[0].properties.attributeRules[0].dnfCondition[0][0].attributeValueIncludedIn[0];\n    const object_id = \"',parameters('userObjectId'),'\";  // For user osama\n    const synapse_id = \"',parameters('synapseObjectId'),'\";  // For Synapse workspace\n\n    const response_update_root_policy = await update_root_policy(access_token, account_endpoint, purview_account_name,\n        policy_id, policy_version, object_id, synapse_id, app_object_id);\n    context.log(response_update_root_policy);\n\n    response_root_policy = await get_root_policy(access_token, account_endpoint);\n    context.log(`Updated allowed entities are: ${response_root_policy.values[0].properties.attributeRules[0].dnfCondition[0][0].attributeValueIncludedIn}`);\n\n\n    context.res = {\n        body: `Azure Purview collection roles update function triggered successfully..`\n    };\n}')]"
        }
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('configurePurviewFunctionName'))]",
      "properties": {
        "config": {
            "bindings": [
                {
                  "authLevel": "anonymous",
                  "type": "httpTrigger",
                  "direction": "in",
                  "name": "req",
                  "methods": [
                    "get",
                    "post"
                  ]
                },
                {
                  "type": "http",
                  "direction": "out",
                  "name": "res"
                }
              ]
        },
        "files": {
          "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\nvar fs = require(\"fs\");\nconst path = require(\"path\");\nconst csv = require(\"fast-csv\");\nconst got = require(\"got\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n// ################\n// GLOBAL VARIABLES\n// ################\n\n// Setting up strings for KeyVault secret\nvar data_source_names = [];\nvar glossary_term_guids = [];\nconst keyVaultName = \"',parameters('keyVaultName'),'\";\nconst KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n\n// Setting up client for KeyVault\nconst credential = new DefaultAzureCredential();\nconst client = new SecretClient(KVUri, credential);\n\n// Setting up variables for glossary term csv\nvar csv_path = \"https://raw.githubusercontent.com/osamaemumba/synapse-purview-poc/main/export-terms.csv\";\nvar csv_row_count;\nvar current_term_count=0;\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_kv_connection(access_token, Endpoint, kv_name, connection_name, connection_description, api_version=\"2018-12-01-preview\") {\n    var data = {\n        \"properties\": {\n            \"baseUrl\": `https://${kv_name}.vault.azure.net/`,\n            \"description\": `${connection_description}`\n        }\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/scan/azureKeyVaults/${connection_name}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_kv_purview_credential(access_token, Endpoint, kv_connection_name, sql_user_name, secret_name, credential_name, credential_description, api_version=\"2020-12-01-preview\") {\n\n    var data = {\n        \"properties\": {\n            \"description\":`${credential_description}`,\n            \"type\":\"SqlAuth\",\n            \"typeProperties\": {\n                \"user\":`${sql_user_name}`,\n                \"password\": {\n                    \"type\":\"AzureKeyVaultSecret\",\n                    \"secretName\":`${secret_name}`,\n                    \"secretVersion\":\"\",\n                    \"store\": {\n                        \"referenceName\":`${kv_connection_name}`,\n                        \"type\":\"LinkedServiceReference\"\n                    }\n                }\n            }\n        }\n    }\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/proxy/credentials/${credential_name}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_data_source(access_token, Endpoint, kind, baseUrl, dataSourceName, subscription_id, rg_name, collection_name, api_version=\"2018-12-01-preview\") {\n    data_source_names.push(dataSourceName);\n\n    var data = {\n        \"kind\":`${kind}`,\n        \"properties\": {\n            \"endpoint\": `${baseUrl}`,\n            \"resourceName\":`${dataSourceName}`,\n            \"collection\": {\n                \"type\":\"CollectionReference\",\n                \"referenceName\":`${collection_name}`\n            },\n            \"subscriptionId\":`${subscription_id}`,\n            \"resourceGroup\":`${rg_name}`\n        }\n    };\n    \n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/scan/datasources/${dataSourceName}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_scan(access_token, Endpoint, kind, dataSourceName, scanName, account_name, ruleset_kind, api_version=\"2018-12-01-preview\") {\n\n    var data = {\n        \"kind\": `${kind}`,\n        \"properties\": {\n            \"collection\": {\n                \"type\": \"CollectionReference\",\n                \"referenceName\": `${account_name}`,\n            },\n            \"scanRulesetType\": \"System\",\n            \"scanRulesetName\": `${ruleset_kind}`,\n        },\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/datasources/${dataSourceName}/scans/${scanName}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction run_scan(access_token, Endpoint, dataSourceName, scanName, scanLevel, api_version=\"2018-12-01-preview\") {\n    var data = {\n        \"scanLevel\":`${scanLevel}`\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`${Endpoint}/scan/datasources/${dataSourceName}/scans/${scanName}/run?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_term_template(access_token, Endpoint, template_name, template_description, attribute_name, attribute_description) {\n    var data = {\n        \"termTemplateDefs\": [\n                {\n                    \"name\":`${template_name}`,\n                    \"description\":`${template_description}`,\n                    \"attributeDefs\":[\n                        {\n                        \"name\":`${attribute_name}`,\n                        \"description\":`${attribute_description}`,\n                        \"isOptional\":\"true\",\n                        \"typeName\":\"string\",\n                        \"options\":\n                            {\n                            \"isDisabled\":\"false\"\n                            }\n                        }\n                    ]\n                    }\n                ]\n            };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`${Endpoint}/catalog/api/atlas/v2/types/typedefs`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nasync function get_glossary_details(access_token, account_endpoint) {\n    var config = {\n        headers: { \n            \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.get(`${account_endpoint}/catalog/api/atlas/v2/glossary`, config)\n        .then(response => response.data)\n        .catch(error => error);\n}\n\nasync function create_glossary_term(access_token, account_endpoint, template_name, term_name, term_description, glossary_guid, acronym, term_status) {\n    var obj = {};\n    // obj[template_name] = {};  // Pass a term template name as argument in function call below, or comment this line for System Default term template.\n    \n    var data = {\n        \"name\":`${term_name}`,\n        \"anchor\": {\n            \"glossaryGuid\":`${glossary_guid}`\n            },\n        \"status\":`${term_status}`,\n        \"nickName\":`${term_name}`,\n        \"longDescription\": `${term_description}`,\n        \"abbreviation\": `${acronym}`,\n        \"attributes\": {}\n        };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    try {\n        const response = await axios.post(`${account_endpoint}/catalog/api/atlas/v2/glossary/term?includeTermHierarchy=true`, data, config);\n        current_term_count++;\n        console.log(`Term ${term_name} created successfully. Term count: ${current_term_count}`);\n        glossary_term_guids.push(response.data.guid);\n        if (current_term_count === csv_row_count) {\n            try {\n                const result_terms = await client.setSecret(\"TermGUIDs\", glossary_term_guids.toString());\n                console.log(\"Term GUID Secret created successfully. Response:\");\n                console.log(result_terms);\n            } catch (error) {\n                console.log(error);\n            }\n        };\n    } catch (error) {\n        context.log.error(error);\n      }  \n}\n\nfunction create_synapse_data_source(access_token, Endpoint, kind, workspace_name, collection_name, dataSourceName, rg_name, subscription_id, api_version=\"2018-12-01-preview\") {\n    data_source_names.push(dataSourceName);\n\n    var data = {\n        \"kind\":`${kind}`,\n        \"properties\": {\n            \"dedicatedSqlEndpoint\":`${workspace_name}.sql.azuresynapse.net`,\n            \"serverlessSqlEndpoint\":`${workspace_name}-ondemand.sql.azuresynapse.net`,\n            \"resourceName\":`${workspace_name}`,\n            \"collection\": {\n                \"type\":\"CollectionReference\",\n                \"referenceName\":`${collection_name}`\n            },\n            \"subscriptionId\":`${subscription_id}`,\n            \"resourceGroup\":`${rg_name}`\n        }\n    };\n    \n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/scan/datasources/${dataSourceName}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_synapse_scan(access_token, Endpoint, kind, dataSourceName, scanName, account_name, ruleset_kind, api_version=\"2018-12-01-preview\") {\n\n    var data = {\n      \"name\": `${scanName}`,\n      \"kind\": `${kind}`,\n      \"properties\": {\n        \"resourceTypes\": {\n          \"AzureSynapseDedicatedSql\": {\n            \"resourceNameFilter\": { \"resources\": [\"demoSQLPool\"] },\n            \"credential\": null,\n            \"scanRulesetName\": `${ruleset_kind}`,\n            \"scanRulesetType\": \"System\",\n          },\n        },\n        \"credential\": null,\n        \"collection\": {\n          \"type\": \"CollectionReference\",\n          \"referenceName\": `${account_name}`,\n        },\n      },\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`${Endpoint}/scan/datasources/${dataSourceName}/scans/${scanName}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction run_scan(access_token, Endpoint, dataSourceName, scanName, scanLevel, api_version=\"2018-12-01-preview\") {\n    var data = {\n        \"scanLevel\":`${scanLevel}`\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`${Endpoint}/scan/datasources/${dataSourceName}/scans/${scanName}/run?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\nfunction add_synapse_ad_role(access_token, object_id, role_id) {\n    var data = {\n        \"@odata.id\": `https://graph.microsoft.com/v1.0/directoryObjects/${object_id}`\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.post(`https://graph.microsoft.com/v1.0/directoryRoles/roleTemplateId=${role_id}/members/$ref`, data, config)\n}\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"Azure Purview assets configuration function processed a request.\");\n\n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    const tenant_id = \"',variables('tenantId'),'\"\n    const client_id = \"',parameters('aadAppClientId'),'\"\n    const resource_url = \"https://purview.azure.net/\"\n    const resource_mgmt_url = \"https://management.azure.com/\"\n    const resource_synapse_url = \"https://dev.azuresynapse.net/\"\n    const resource_graph_url = \"https://graph.microsoft.com/\"\n\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret = retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function for Purview assets magagement\n    const token = await azuread_auth(tenant_id, client_id, client_secret, resource_url);\n    const access_token = token.access_token;\n    context.log(access_token)\n\n    // Retrieve access_token from AzureAuth function for Purview Account creation\n    const token_mgmt = await azuread_auth(tenant_id, client_id, client_secret, resource_mgmt_url);\n    const access_token_mgmt = token_mgmt.access_token;\n    context.log(access_token_mgmt)\n\n    // Retrieve access_token from AzureAuth function for Purview assets magagement\n    const token_synapse = await azuread_auth(tenant_id, client_id, client_secret, resource_synapse_url);\n    const access_token_synapse = token_synapse.access_token;\n    context.log(access_token_synapse)\n\n    // Retrieve access_token from AzureAuth function for Graph API\n    const token_graph = await azuread_auth(tenant_id, client_id, client_secret, resource_graph_url);\n    const access_token_graph = token_graph.access_token;\n    context.log(access_token_graph)\n\n\n    // ###############\n    // Purview Account\n    // ###############\n\n    // Setting up values to be used\n    const purview_account_name = \"',parameters('purviewAccountName'),'\";\n    const rg_name = \"',variables('resourceGroup'),'\";\n    const subscription_id = \"',variables('subscriptionId'),'\";\n\n    const scan_endpoint = `https://${purview_account_name}.scan.purview.azure.com`;     // Azure Purview scan endpoint\n    const account_endpoint = `https://${purview_account_name}.purview.azure.com`;      // Azure Purview account endpoint\n\n\n    // #####\n    // Scans\n    // #####\n    const scan_level = \"Full\";\n\n    // ############################\n    // REGISTER SYNAPSE DATA SOURCE\n    // ############################\n\n    // Setting up values to be used\n\n    const workspace_name = \"',parameters('synapseName'),'\";\n    const synapse_kind = \"AzureSynapseWorkspace\";\n    const workspace_datasource_name = \"SynapseAnalytics-YB4\";   // Data Source name to be created\n    const synapse_scan_name = \"qs-synapse-scan\";\n    const synapse_scan_kind = \"AzureSynapseWorkspaceMsi\";\n    const synapse_scan_ruleset_kind = \"AzureSynapseSQL\";\n\n    // Creating Synapse Data Source\n    const response_synapse_data_source = await create_synapse_data_source(access_token, account_endpoint, synapse_kind, workspace_name,\n        purview_account_name, workspace_datasource_name, rg_name, subscription_id);\n    context.log(response_synapse_data_source)\n\n    // Creating Scan\n    const response_synapse_scan_creation = await create_synapse_scan(access_token, account_endpoint, synapse_scan_kind,\n        workspace_datasource_name, synapse_scan_name, purview_account_name, synapse_scan_ruleset_kind);\n    context.log(response_synapse_scan_creation)\n\n    // Running scan\n    const response_synapse_run_scan = await run_scan(access_token, account_endpoint, workspace_datasource_name, synapse_scan_name, scan_level);\n    context.log(response_synapse_run_scan)\n\n\n    // #######################\n    // REGISTER BLOB DATA SOURCE\n    // #######################\n\n    // Setting up values to be used\n    const blob_kind = \"AzureStorage\";\n    const blob_storageBaseUrl = \"https://',parameters('storageAccountName'),'.blob.core.windows.net/\";           // Azure blob service url\n    const blob_data_source_name = \"DataSource-Blob\";                                      // Data Source name to be created\n    const blob_scan_name = \"qs-blob-scan\";\n    const blob_scan_kind = \"AzureStorageMsi\";\n\n    // Creating Blob Data Source\n    const response_data_source = await create_data_source(access_token, account_endpoint, blob_kind, blob_storageBaseUrl,\n        blob_data_source_name, subscription_id, rg_name, purview_account_name);\n    context.log(response_data_source)\n\n    // Creating Scan\n    const response_blob_scan_creation = await create_scan(access_token, scan_endpoint, blob_scan_kind, blob_data_source_name,\n        blob_scan_name, purview_account_name, blob_kind);\n    context.log(response_blob_scan_creation)\n\n    // Running scan\n    const response_blob_run_scan = await run_scan(access_token, account_endpoint, blob_data_source_name, blob_scan_name, scan_level);\n    context.log(response_blob_run_scan)\n\n\n    // ########################\n    // REGISTER ADLS2 DATA SOURCE\n    // ########################\n\n    // Setting up values to be used\n    const adls_kind = \"AdlsGen2\"\n    const adls_source_name = \"DataSource-AdlsGen2\"                                                // Data Source name to be created\n    const adls_blob_storageBaseUrl = \"https://',parameters('dataLakeAccountName'),'.dfs.core.windows.net/\"              // Adls2 service url\n    const adls_scan_name = \"qs-adls-scan\";\n    const adls_scan_kind = \"AdlsGen2Msi\";\n\n    // Creating AdlsGen2 Data Source\n    const response_adls_data_source = await create_data_source(access_token, account_endpoint, adls_kind, adls_blob_storageBaseUrl,\n        adls_source_name, subscription_id, rg_name, purview_account_name);\n    context.log(response_adls_data_source)\n\n    // Creating Scan\n    const response_adls_scan_creation = await create_scan(access_token, scan_endpoint, adls_scan_kind, adls_source_name,\n        adls_scan_name, purview_account_name, adls_kind);\n    context.log(response_adls_scan_creation)\n\n    // Running scan\n    const response_adls_run_scan = await run_scan(access_token, account_endpoint, adls_source_name, adls_scan_name, scan_level);\n    context.log(response_adls_run_scan)\n\n\n    // #################\n    // BUSINESS GLOSSARY\n    // #################\n\n    try {\n        let glossary_details = await get_glossary_details(access_token, account_endpoint);\n        context.log(glossary_details)\n    \n        // Setting up values to be used\n        const glossary_guid = glossary_details[0].guid;\n        const template_name = \"Purview-QS\";\n    \n        // Creating glossary terms\n        got.stream(csv_path)\n          .pipe(csv.parse({ headers: true }))\n          .on(\"error\", (error) => context.error(error))\n          .on(\"data\", function (data) {\n            create_glossary_term(access_token, account_endpoint, template_name, data.Name, data.Definition, glossary_guid,\n                data.Acronym, data.Status);\n            })\n          .on(\"end\", function (rowCount) {\n              console.log(`Parsed ${rowCount} rows`);\n              csv_row_count = rowCount;\n            });    \n    } catch (error) {\n        context.log(error)\n    }\n\n    // #################\n    // UPDATING SECRETS\n    // #################\n\n    // Adding source names and term guids to Azure keyvault secrets\n    const result_sources = await client.setSecret(\"DataSources\", data_source_names.toString());\n    context.log(result_sources)\n\n    context.res = {\n        body: `AzurePurview Creation function triggered successfully..`\n    };\n}')]"
        }
      },
      "dependsOn": []
    },
    {
        "type": "Microsoft.Web/sites/functions",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('functionAppName'), variables('deletePurviewFunctionName'))]",
        "properties": {
          "config": {
              "bindings": [
                  {
                    "authLevel": "anonymous",
                    "type": "httpTrigger",
                    "direction": "in",
                    "name": "req",
                    "methods": [
                      "get",
                      "post"
                    ]
                  },
                  {
                    "type": "http",
                    "direction": "out",
                    "name": "res"
                  }
                ]
          },
          "files": {
            "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction delete_data_source(access_token, Endpoint, dataSourceName, api_version=\"2018-12-01-preview\") {\n    var config = {\n    method: \"delete\",\n    url: `${Endpoint}/datasources/${dataSourceName}?api-version=${api_version}`,\n    headers: { \n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios(config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction delete_glossary_term(access_token, Endpoint, term_guid) {\n    var config = {\n        method: \"delete\",\n        url: `${Endpoint}/catalog/api/atlas/v2/glossary/term/${term_guid}`,\n        headers: { \n            \"Authorization\": `Bearer ${access_token}`\n            }\n        };\n\n    return axios(config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"JavaScript HTTP trigger function processed a request.\");\n    \n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    // Setting up values to be used\n    const keyVaultName = \"',parameters('keyVaultName'),'\";\n    const KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n    const tenant_id = \"',variables('tenantId'),'\"\n    const client_id = \"',parameters('aadAppClientId'),'\"\n    const resource_url = \"https://purview.azure.net/\"\n\n    // Setting up client for KeyVault\n    const credential = new DefaultAzureCredential();\n    const client = new SecretClient(KVUri, credential);\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret=retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function\n    const token = await azuread_auth(tenant_id, client_id, client_secret, resource_url);\n    const access_token = token.access_token;\n\n    // Retrieving data sources names from KeyVault to delete\n    const retrieved_data_sources = await client.getSecret(\"DataSources\");\n    let data_source_names = retrieved_data_sources.value;\n\n    // Retrieving term GUIDs from KeyVault to delete\n    const retrieved_term_guids = await client.getSecret(\"TermGUIDs\");\n    let glossary_term_guids = retrieved_term_guids.value;\n\n    // Filtering/cleaning up the values to be used further\n    data_source_names = data_source_names.split(\",\").filter(value => value!=\"\");\n    context.log(`Data Sources to be deleted are: ${data_source_names}`);\n    glossary_term_guids = glossary_term_guids.split(\",\").filter(value => value!=\"\");\n    context.log(`Glossary terms to be deleted have GUID: ${glossary_term_guids}`);\n\n\n    // ##################\n    // DELETE RESOURCES\n    // ##################\n\n    // Setting up values to be used\n    const scan_endpoint = \"https://',parameters('purviewAccountName'),'.scan.purview.azure.com\";     // Azure Purview scan endpoint\n    const account_endpoint = \"https://',parameters('purviewAccountName'),'.purview.azure.com\";      // Azure Purview account endpoint\n\n    // Deleting Data Sources\n    for (let source_name of data_source_names) {\n        const response_delete_source = await delete_data_source(access_token, scan_endpoint, source_name);\n        context.log(response_delete_source)\n    }\n\n    // Deleting glossary terms\n    for (let term_guid of glossary_term_guids) {\n        const response_delete_term = await delete_glossary_term(access_token, account_endpoint, term_guid);\n        context.log(response_delete_term)\n    }\n\n    // Deleting secrets created\n    for (let secret_name of [\"DataSources\", \"TermGUIDs\"]) {\n        const deletePoller = await client.beginDeleteSecret(secret_name);\n        const delete_response = await deletePoller.pollUntilDone();\n        context.log(delete_response)\n        await client.purgeDeletedSecret(secret_name);\n    }\n\n    context.res = {\n        body: `AzurePurview Deletion function triggered successfully..`\n    };\n}')]"
          }
        },
        "dependsOn": []
      }
  ]
}

{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "aadAppClientId": {
        "type": "string",
        "metadata": {
          "description": "The client Id of azure active directory app/service principal"
        }
      },
      "keyVaultName": {
        "type": "string"
      },
      "purviewAccountName": {
        "type": "string"
      }
    },
      "variables": {
        "functionAppName": "[concat('funcapp', uniqueString(resourceGroup().id))]",
        "createPurviewAccountFunctionName": "createPurviewAccount",
        "deletePurviewFunctionName": "deletePurview",
        "tenantId": "[subscription().tenantId]",
        "subscriptionId": "[subscription().subscriptionId]",
        "resourceGroup": "[resourceGroup().name]"
      },
  "resources": [
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('createPurviewAccountFunctionName'))]",
      "properties": {
        "config": {
            "bindings": [
                {
                  "authLevel": "anonymous",
                  "type": "httpTrigger",
                  "direction": "in",
                  "name": "req",
                  "methods": [
                    "get",
                    "post"
                  ]
                },
                {
                  "type": "http",
                  "direction": "out",
                  "name": "res"
                }
              ]
        },
        "files": {
          "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n// ################\n// GLOBAL VARIABLES\n// ################\n\n// Setting up strings for KeyVault secret\nconst keyVaultName =\"', parameters('keyVaultName'),'\";\nconst KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n\n// Setting up client for KeyVault\nconst credential = new DefaultAzureCredential();\nconst client = new SecretClient(KVUri, credential);\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction create_purview_account(access_token, subscription_id, rg_name, managed_rg_name, account_name, region, api_version=\"2020-12-01-preview\") {\n    var data = {\n        \"location\": `${region}`,\n        \"sku\": {\n            \"name\": \"Standard\",\n            \"capacity\": 4\n        },\n        \"identity\": {\n            \"type\": \"SystemAssigned\"\n        },\n        \"tags\": {\n            \"Name\": `${account_name}`\n        },\n        \"properties\": {\n            \"managedResourceGroupName\": `${managed_rg_name}`,\n            \"publicNetworkAccess\": \"Enabled\"\n        }\n    };\n\n    var config = {\n    headers: { \n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios.put(`https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/${rg_name}/providers/Microsoft.Purview/accounts/${account_name}?api-version=${api_version}`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"Azure Purview Creation function processed a request.\");\n\n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    const tenant_id =\"', variables('tenantId'),'\"\n    const client_id =\"', parameters('aadAppClientId'),'\"\n    const resource_mgmt_url = \"https://management.azure.com/\"\n\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret = retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function for Purview Account creation\n    const token_mgmt = await azuread_auth(tenant_id, client_id, client_secret, resource_mgmt_url);\n    const access_token_mgmt = token_mgmt.access_token;\n    context.log(access_token_mgmt)\n\n    \n    // Common variables\n    const subscription_id =\"', variables('subscriptionId'),'\";\n    const rg_name =\"', variables('resourceGroup'),'\";\n\n    // ########################\n    // Purview Account Creation\n    // ########################\n\n    // Setting up values to be used\n    const purview_account_name =\"', parameters('purviewAccountName'),'\";\n    const region_purview =\"', parameters('location'),'\";\n    const managed_rg_purview = `${purview_account_name}-managed-rg`;\n\n    const response_purview_account = await create_purview_account(access_token_mgmt, subscription_id, rg_name, managed_rg_purview,\n        purview_account_name, region_purview);\n    context.log(response_purview_account);\n\n\n    // Creating Purview Account secret to retrieve from configuration function\n    const result_purview_account = await client.setSecret(\"purviewAccount\", purview_account_name);\n    context.log(result_purview_account)\n\n    context.res = {\n        body: `AzurePurview Creation function triggered successfully..`\n    };\n}')]"
        }
      },
      "dependsOn": []
    },
    {
        "type": "Microsoft.Web/sites/functions",
        "apiVersion": "2020-06-01",
        "name": "[format('{0}/{1}', variables('functionAppName'), variables('deletePurviewFunctionName'))]",
        "properties": {
          "config": {
              "bindings": [
                  {
                    "authLevel": "anonymous",
                    "type": "httpTrigger",
                    "direction": "in",
                    "name": "req",
                    "methods": [
                      "get",
                      "post"
                    ]
                  },
                  {
                    "type": "http",
                    "direction": "out",
                    "name": "res"
                  }
                ]
          },
          "files": {
            "index.js": "[concat('var axios = require(\"axios\");\nvar qs = require(\"qs\");\n\nconst { DefaultAzureCredential } = require(\"@azure/identity\");\nconst { SecretClient } = require(\"@azure/keyvault-secrets\");\n\n\nfunction azuread_auth(tenant_id, client_id, client_secret, resource_url) {\n    var data = qs.stringify({\n        \"grant_type\": \"client_credentials\",\n        \"client_id\": `${client_id}`,\n        \"client_secret\": `${client_secret}`,\n        \"resource\": `${resource_url}` \n    });\n\n    var config = {\n    headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n    };\n\n    return axios.post(`https://login.microsoftonline.com/${tenant_id}/oauth2/token`, data, config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction delete_data_source(access_token, Endpoint, dataSourceName, api_version=\"2018-12-01-preview\") {\n    var config = {\n    method: \"delete\",\n    url: `${Endpoint}/datasources/${dataSourceName}?api-version=${api_version}`,\n    headers: { \n        \"Authorization\": `Bearer ${access_token}`\n        }\n    };\n\n    return axios(config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\nfunction delete_glossary_term(access_token, Endpoint, term_guid) {\n    var config = {\n        method: \"delete\",\n        url: `${Endpoint}/catalog/api/atlas/v2/glossary/term/${term_guid}`,\n        headers: { \n            \"Authorization\": `Bearer ${access_token}`\n            }\n        };\n\n    return axios(config)\n    .then(response => response.data)\n    .catch(error => error);\n}\n\n\n\nmodule.exports = async function (context, req) {\n    context.log(\"JavaScript HTTP trigger function processed a request.\");\n    \n    // ############################\n    // AZURE AD AUTHENTICATION\n    // ############################\n\n    // Setting up values to be used\n    const keyVaultName = \"',parameters('keyVaultName'),'\";\n    const KVUri = \"https://\" + keyVaultName + \".vault.azure.net\";\n    const tenant_id = \"',variables('tenantId'),'\"\n    const client_id = \"',parameters('aadAppClientId'),'\"\n    const resource_url = \"https://purview.azure.net/\"\n\n    // Setting up client for KeyVault\n    const credential = new DefaultAzureCredential();\n    const client = new SecretClient(KVUri, credential);\n\n    // Retrieving secret from KeyVault\n    const retrievedSecret = await client.getSecret(\"aadAppClientSecret\");\n    const client_secret=retrievedSecret.value;\n\n    // Retrieve access_token from AzureAuth function\n    const token = await azuread_auth(tenant_id, client_id, client_secret, resource_url);\n    const access_token = token.access_token;\n\n    // Retrieving data sources names from KeyVault to delete\n    const retrieved_data_sources = await client.getSecret(\"DataSources\");\n    let data_source_names = retrieved_data_sources.value;\n\n    // Retrieving term GUIDs from KeyVault to delete\n    const retrieved_term_guids = await client.getSecret(\"TermGUIDs\");\n    let glossary_term_guids = retrieved_term_guids.value;\n\n    // Filtering/cleaning up the values to be used further\n    data_source_names = data_source_names.split(\",\").filter(value => value!=\"\");\n    context.log(`Data Sources to be deleted are: ${data_source_names}`);\n    glossary_term_guids = glossary_term_guids.split(\",\").filter(value => value!=\"\");\n    context.log(`Glossary terms to be deleted have GUID: ${glossary_term_guids}`);\n\n\n    // ##################\n    // DELETE RESOURCES\n    // ##################\n\n    // Setting up values to be used\n    const scan_endpoint = \"https://',parameters('purviewAccountName'),'.scan.purview.azure.com\";     // Azure Purview scan endpoint\n    const account_endpoint = \"https://',parameters('purviewAccountName'),'.purview.azure.com\";      // Azure Purview account endpoint\n\n    // Deleting Data Sources\n    for (let source_name of data_source_names) {\n        const response_delete_source = await delete_data_source(access_token, scan_endpoint, source_name);\n        context.log(response_delete_source)\n    }\n\n    // Deleting glossary terms\n    for (let term_guid of glossary_term_guids) {\n        const response_delete_term = await delete_glossary_term(access_token, account_endpoint, term_guid);\n        context.log(response_delete_term)\n    }\n\n    // Deleting secrets created\n    for (let secret_name of [\"DataSources\", \"TermGUIDs\"]) {\n        const deletePoller = await client.beginDeleteSecret(secret_name);\n        const delete_response = await deletePoller.pollUntilDone();\n        context.log(delete_response)\n        await client.purgeDeletedSecret(secret_name);\n    }\n\n    context.res = {\n        body: `AzurePurview Deletion function triggered successfully..`\n    };\n}')]"
          }
        },
        "dependsOn": []
      }
  ]
}

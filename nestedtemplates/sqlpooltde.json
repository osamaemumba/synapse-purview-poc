{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "utcValue": {
        "defaultValue": "[utcNow()]",
        "type": "String"
      },
      "location": {
        "type": "string"
      },
      "synapseName": {
        "type": "String"
      },
      "userAzureLoginId": {
        "type": "String"
      },
      "userAzureLoginPassword": {
        "type": "securestring"
      }
    },
    "variables": {
      "sqlPoolName": "demoSQLPool",
      "dsIdentityName": "[toLower(concat('dsId', uniquestring(resourceGroup().id)))]"
    },
    "resources": [
      {
        "type": "Microsoft.Resources/deploymentScripts",
        "apiVersion": "2020-10-01",
        "name": "waitForTde",
        "location": "eastus",
        "dependsOn": [],
        "identity": {
          "type": "UserAssigned",
          "userAssignedIdentities": {
            "[resourceID('Microsoft.ManagedIdentity/userAssignedIdentities', variables('dsIdentityName'))]": {}
          }
        },
        "kind": "AzurePowerShell",
        "properties": {
          "forceUpdateTag": "[parameters('utcValue')]",
          "azPowerShellVersion": "6.4",
          "arguments": "[concat('-synapseName', ' ', concat('\\\"', parameters('synapseName'), '\\\"'), ' ', '-userAzureLoginId', ' ', concat('\\\"', parameters('userAzureLoginId'), '\\\"'), ' ', '-userAzureLoginPassword', ' ', concat('\\\"', parameters('userAzureLoginPassword'), '\\\"'))]",
          "scriptContent": "param([string] $synapseName = $synapseName, [string] $userAzureLoginId = $userAzureLoginId, [string] $userAzureLoginPassword = $userAzureLoginPassword)\n\rInstall-Module -Name \"Az.Synapse\" -RequiredVersion 0.16.0 -Force\n\rInstall-Module -Name \"Az.Accounts\" -Force\n\rInstall-Module -Name \"Az.Resources\" -Force\n\r$PWord = ConvertTo-SecureString -String $userAzureLoginPassword -AsPlainText -Force\n\r$User = $userAzureLoginId\n\r$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $User, $PWord\n\rConnect-AzAccount -Credential $Credential\n\rwhile($true)\n\r{               \n\r        $tdeState = (Get-AzSynapseSqlPoolTransparentDataEncryption -WorkspaceName synlvypimjhlihek -Name demoSqlPool).State\n\r        if ($tdeState -eq \"Enabled\") {break}\n\r        else {Start-Sleep -s 60;Set-AzSynapseSqlPoolTransparentDataEncryption -WorkspaceName $synapseName -Name demoSqlPool -State Enabled;continue}\n\r}",
          "timeout": "PT1H",
          "cleanupPreference": "OnSuccess",
          "retentionInterval": "P1D"
        }
      }
    ]

    }